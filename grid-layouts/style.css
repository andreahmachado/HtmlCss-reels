.container{
    width: 40rem;
    margin:30px auto;

    display: grid;
    grid-template-rows:100px 200px 400px 100px;
    grid-template-columns: repeat(3,1fr)200px;
    grid-gap: 30px;

        & > * {
            background-color: brown;
            color: white;
            padding: 20px;
            text-align: center;
            font-family: sans-serif;
        }
}

.header{
 grid-column: 1/-1; /*estende, pois comeca no 1 e termina no -1  */
}

.main-content{
    grid-column: 1/4;/* ou  1 span 3 -> span que se estende,no ex por 3 celulas */
}

.side-bar{
    grid-column: 4/5;
    grid-row: 2/4;/* 2 span 2 -> span que se estende*/
}

footer{
    grid-column: 1/-1;
}
h1,h2{
    font-size: 20px;
    text-align: center;
    text-transform: uppercase;
    padding-top: 2rem;
}
/* METHOD 2 : LINE NAME
        Usamos os colchetes [nome ].
        Então agora temos todas as nossas faixas de linhas quanto de colunas nomeadas, e é uma boa prática fazê-lo.
        Portanto, em um layout profissional,geralmente, sempre nomeamos nossas linhas de grade
        como essas e usamos esses nomes para posicionar os itens nela.
        */

.container-{
    width: 40rem;
    margin:30px auto;

    display: grid;
    grid-template-rows:[header-start]100px [header-end- box-start]200px [box-end main-start]400px[main-end footer-start] 100px[footer-end];
    grid-template-columns: repeat(3,[col-start]1fr[col-end])200px[grid-end];
    grid-gap: 30px;
 

        & > * {
            background-color: brown;
            color: white;
            padding: 20px;
            text-align: center;
            font-family: sans-serif;
        }
}

.header-{
 grid-column:col-start 1/ grid-end;/* ou -1*/
}

.main-content-{
    grid-column: col-start 1/col-end 3/* ou  1 span 3 -> span que se estende,no ex por 3 celulas */
}

.side-bar-{
    grid-column:col-end 3 / grid-end;
    grid-row: box-start/main-end;/* ou box-start/ span 2, q se estende por 2 celulas*/
}

.footer-{
    grid-column:col-start 1/-1;
}
h1{
    font-size: 20px;
    text-align: center;
    text-transform: uppercase;
    padding-top: 2rem;
}

/* METHOD 2 : LINE NAME
   Usamos a propriedade de áreas de modelo de grade.
   Escrevemos algumas strings e damos um nome a cada célula da grade.*/
    
        .container-{
            width: 40rem;
            margin:30px auto;
        
            display: grid;
            grid-template-rows:[header-start]100px [header-end- box-start]200px [box-end main-start]400px[main-end footer-start] 100px[footer-end];
            grid-template-columns: repeat(3,[col-start]1fr[col-end])200px[grid-end];
            grid-gap: 30px;
         
        
                & > * {
                    background-color: brown;
                    color: white;
                    padding: 20px;
                    text-align: center;
                    font-family: sans-serif;
                }
        }
        
        .header-{
         grid-column:col-start 1/ grid-end;/* ou -1*/
        }
        
        .main-content-{
            grid-column: col-start 1/col-end 3/* ou  1 span 3 -> span que se estende,no ex por 3 celulas */
        }
        
        .side-bar-{
            grid-column:col-end 3 / grid-end;
            grid-row: box-start/main-end;/* ou box-start/ span 2, q se estende por 2 celulas*/
        }
        
        .footer-{
            grid-column:col-start 1/-1;
        }
        h1{
            font-size: 20px;
            text-align: center;
            text-transform: uppercase;
            padding-top: 2rem;
        }

        /* METHOD 3 : NAME GRID AREAS
        Bom para construir layouts pequenos, pois é bem direto. Ex: algo como 4x4 ou 5x5.
   */
    
   .container--{
    width: 40rem;
    margin:30px auto;

    display: grid;
    grid-template-rows:100px 200px 400px 100px;
    grid-template-columns: repeat(3,1fr)200px;
    grid-gap: 30px;

    grid-template-areas: "head head head head"
                          "box-1 box-2 box-3 side"
                          "main main main side"
                          "foot foot foot foot";

        & > * {
            background-color: brown;
            color: white;
            padding: 20px;
            text-align: center;
            font-family: sans-serif;
        }
}

.header--{
    grid-area: head;
}

.small-box-1-- {
    grid-area: box-1;
}
.small-box-2-- {
    grid-area: box-2;
}
.small-box-3-- {
    grid-area: box-3;
}
.main-content--{
    grid-area: main;
}

.side-bar--{
grid-area: side;
}

.footer--{
grid-area: foot;}
h1{
    font-size: 20px;
    text-align: center;
    text-transform: uppercase;
    padding-top: 2rem;
}
/*implict vx explicit*/

.container2{
    width: 40rem;
    margin: 30px auto;

/*Essas quatro células de grade que definimos aqui no começo e que agora estão
ocupadas por esses quatro itens de grade aqui, essa é a chamada grade
explícita porque definimos explicitamente como essas linhas e essas colunas devem se parecer.
E então a parte que é automaticamente adicionada para ajustar o conteúdo que não
se encaixa em nossa grade explícita, CSS adiciona a grade implícita depois disso.*/
    display: grid;
    grid-template-rows: repeat(2, 150px);
    grid-template-columns: repeat(2 , 1fr);
    grid-gap: 30px;

/*Essa grade implícita e a capacidade de estilizar essas linhas e colunas adicionais são ótimas para
casos de uso em que você realmente não sabe quantas linhas ou colunas haverá em sua grade, em seu layout.
Assim, você pode controlar a aparência da grade mesmo que não saiba quantos itens haverá nela.*/

    grid-auto-rows: 80px;

    grid-auto-flow: row;
    grid-auto-columns: .5fr;

        
    }